// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProject1.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CalculateGenerationsFeature : object, Xunit.IClassFixture<CalculateGenerationsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CalculateGenerations.feature"
#line hidden
        
        public CalculateGenerationsFeature(CalculateGenerationsFeature.FixtureData fixtureData, SpecFlowProject1_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calculate Generations", "Calculate subsequent generations of the grid using known examples.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A south east facing glider moves as expected")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate Generations")]
        [Xunit.TraitAttribute("Description", "A south east facing glider moves as expected")]
        public virtual void ASouthEastFacingGliderMovesAsExpected()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A south east facing glider moves as expected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "plainText"});
                table1.AddRow(new string[] {
                            "....."});
                table1.AddRow(new string[] {
                            "..O.."});
                table1.AddRow(new string[] {
                            "...O."});
                table1.AddRow(new string[] {
                            ".OOO."});
                table1.AddRow(new string[] {
                            "....."});
#line 6
 testRunner.Given("an initial grid of", ((string)(null)), table1, "Given ");
#line hidden
#line 13
 testRunner.When("the next 4 generations are calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "plainText"});
                table2.AddRow(new string[] {
                            "....."});
                table2.AddRow(new string[] {
                            "....."});
                table2.AddRow(new string[] {
                            "...O."});
                table2.AddRow(new string[] {
                            "....O"});
                table2.AddRow(new string[] {
                            "..OOO"});
#line 14
 testRunner.Then("the grid is", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A block of 4 cells is stable")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate Generations")]
        [Xunit.TraitAttribute("Description", "A block of 4 cells is stable")]
        public virtual void ABlockOf4CellsIsStable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A block of 4 cells is stable", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "plainText"});
                table3.AddRow(new string[] {
                            "..."});
                table3.AddRow(new string[] {
                            "OO."});
                table3.AddRow(new string[] {
                            "OO."});
                table3.AddRow(new string[] {
                            "..."});
#line 23
 testRunner.Given("an initial grid of", ((string)(null)), table3, "Given ");
#line hidden
#line 29
 testRunner.When("the next 1 generations are calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "plainText"});
                table4.AddRow(new string[] {
                            "..."});
                table4.AddRow(new string[] {
                            "OO."});
                table4.AddRow(new string[] {
                            "OO."});
                table4.AddRow(new string[] {
                            "..."});
#line 30
 testRunner.Then("the grid is", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A Gosper glider gun has a period of 30 generations")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate Generations")]
        [Xunit.TraitAttribute("Description", "A Gosper glider gun has a period of 30 generations")]
        public virtual void AGosperGliderGunHasAPeriodOf30Generations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Gosper glider gun has a period of 30 generations", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("the gosper.rle file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.When("the next 30 generations are calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "plainText"});
                table5.AddRow(new string[] {
                            "........................O..........."});
                table5.AddRow(new string[] {
                            "......................O.O..........."});
                table5.AddRow(new string[] {
                            "............OO......OO............OO"});
                table5.AddRow(new string[] {
                            "...........O...O....OO............OO"});
                table5.AddRow(new string[] {
                            "OO........O.....O...OO.............."});
                table5.AddRow(new string[] {
                            "OO........O...O.OO....O.O..........."});
                table5.AddRow(new string[] {
                            "..........O.....O.......O..........."});
                table5.AddRow(new string[] {
                            "...........O...O...................."});
                table5.AddRow(new string[] {
                            "............OO......................"});
                table5.AddRow(new string[] {
                            ".......................O............"});
                table5.AddRow(new string[] {
                            "........................OO.........."});
                table5.AddRow(new string[] {
                            ".......................OO..........."});
#line 40
 testRunner.Then("the grid is", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CalculateGenerationsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CalculateGenerationsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
